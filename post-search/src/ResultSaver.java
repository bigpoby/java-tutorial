import java.io.*;
import java.util.List;

/**
 * 검색 결과 저장을 담당하는 클래스
 */
public class ResultSaver {
    
    /**
     * 검색 결과를 파일로 저장하는 메소드
     * @param results 검색 결과 목록
     * @param outputFileName 저장할 파일명
     * @param searchWord 검색한 단어
     * @param stats 성능 통계 (선택사항)
     * @return 저장 성공 여부
     */
    public static boolean saveSearchResults(List<SearchEngine.SearchResult> results, 
                                          String outputFileName, String searchWord, 
                                          PerformanceMonitor.SearchStats stats) {
        try (PrintWriter writer = new PrintWriter(
                new FileWriter(outputFileName, java.nio.charset.StandardCharsets.UTF_8))) {
            
            writeHeader(writer, searchWord, results.size(), stats);
            writeSearchResults(writer, results);
            writeFooter(writer, stats);
            
            return true;
        } catch (IOException e) {
            System.err.println("파일 저장 오류: " + outputFileName + " - " + e.getMessage());
            return false;
        }
    }
    
    /**
     * 파일 헤더를 작성하는 메소드
     */
    private static void writeHeader(PrintWriter writer, String searchWord, 
                                  int resultCount, PerformanceMonitor.SearchStats stats) {
        writer.println("=".repeat(60));
        writer.println("              TXT 파일 단어 검색 결과");
        writer.println("=".repeat(60));
        writer.println();
        writer.println("검색어: " + searchWord);
        writer.println("검색 날짜: " + new java.util.Date());
        writer.println("총 발견 항목: " + resultCount + "개");
        
        if (stats != null) {
            writer.printf("검색 시간: %.2f ms%n", stats.getSearchTimeMs());
            writer.printf("검색 파일 수: %d개%n", stats.getFilesSearched());
            writer.printf("처리 라인 수: %d줄%n", stats.getLinesProcessed());
            writer.printf("처리 속도: %.1f 라인/초%n", stats.getLinesPerSecond());
        }
        
        writer.println();
        writer.println("-".repeat(60));
        writer.println();
    }
    
    /**
     * 검색 결과를 작성하는 메소드
     */
    private static void writeSearchResults(PrintWriter writer, List<SearchEngine.SearchResult> results) {
        if (results.isEmpty()) {
            writer.println("검색 결과가 없습니다.");
            return;
        }
        
        String currentFileName = "";
        int fileCount = 0;
        
        for (SearchEngine.SearchResult result : results) {
            // 파일명이 바뀔 때마다 구분 표시
            if (!currentFileName.equals(result.getFileName())) {
                if (!currentFileName.isEmpty()) {
                    writer.println();
                }
                fileCount++;
                writer.printf("[파일 %d] %s%n", fileCount, result.getFileName());
                writer.println("경로: " + result.getFilePath());
                writer.println("─".repeat(40));
                currentFileName = result.getFileName();
            }
            
            writer.printf("행 %d: %s%n", result.getLineNumber(), result.getLineContent());
            
            // 단어 위치 정보가 있는 경우 표시
            if (!result.getWordPositions().isEmpty()) {
                writer.print("     위치: ");
                for (int i = 0; i < result.getWordPositions().size(); i++) {
                    if (i > 0) writer.print(", ");
                    writer.print("열 " + (result.getWordPositions().get(i) + 1));
                }
                writer.println();
            }
        }
    }
    
    /**
     * 파일 푸터를 작성하는 메소드
     */
    private static void writeFooter(PrintWriter writer, PerformanceMonitor.SearchStats stats) {
        writer.println();
        writer.println("-".repeat(60));
        writer.println();
        writer.println("검색 완료!");
        
        if (stats != null) {
            writer.println();
            writer.println("=== 성능 통계 ===");
            writer.printf("전체 실행 시간: %.2f ms%n", stats.getTotalTimeMs());
            writer.printf("파일 검색 시간: %.2f ms%n", stats.getFileSearchTimeMs());
            writer.printf("단어 검색 시간: %.2f ms%n", stats.getSearchTimeMs());
            writer.printf("평균 파일당 처리 시간: %.2f ms%n", stats.getAverageTimePerFile());
            
            PerformanceMonitor.MemoryInfo memInfo = PerformanceMonitor.getMemoryInfo();
            writer.println();
            writer.println("=== 메모리 사용량 ===");
            writer.printf("사용 메모리: %.1f MB%n", memInfo.getUsedMemoryMB());
            writer.printf("전체 메모리: %.1f MB%n", memInfo.getTotalMemoryMB());
            writer.printf("메모리 사용률: %.1f%%%n", memInfo.getMemoryUsagePercent());
        }
        
        writer.println();
        writer.println("Generated by TXT Word Searcher v2.0");
        writer.println("=".repeat(60));
    }
    
    /**
     * 파일 목록을 저장하는 메소드
     * @param files 파일 목록
     * @param outputFileName 저장할 파일명
     * @param directoryPath 검색한 디렉토리
     * @param recursive 재귀 검색 여부
     * @return 저장 성공 여부
     */
    public static boolean saveFileList(List<java.io.File> files, String outputFileName, 
                                     String directoryPath, boolean recursive) {
        try (PrintWriter writer = new PrintWriter(
                new FileWriter(outputFileName, java.nio.charset.StandardCharsets.UTF_8))) {
            
            writer.println("=== TXT 파일 목록 ===");
            writer.println("검색 디렉토리: " + directoryPath);
            writer.println("검색 방식: " + (recursive ? "재귀 검색" : "현재 디렉토리만"));
            writer.println("생성 날짜: " + new java.util.Date());
            writer.println("발견된 파일 수: " + files.size() + "개");
            writer.println();
            
            if (files.isEmpty()) {
                writer.println("파일을 찾을 수 없습니다.");
            } else {
                for (int i = 0; i < files.size(); i++) {
                    FileManager.FileInfo fileInfo = FileManager.getFileInfo(files.get(i));
                    writer.printf("%d. %s%n", i + 1, 
                        recursive ? fileInfo.getAbsolutePath() : fileInfo.getName());
                    writer.printf("   크기: %d bytes%n", fileInfo.getSize());
                    writer.printf("   수정일: %s%n", fileInfo.getLastModified());
                    if (i < files.size() - 1) writer.println();
                }
            }
            
            return true;
        } catch (IOException e) {
            System.err.println("파일 저장 오류: " + outputFileName + " - " + e.getMessage());
            return false;
        }
    }
}
